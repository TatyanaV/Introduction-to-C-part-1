#include <iostream>
#include <conio.h>
#include <time.h>
#include <stdlib.h>

using namespace std;

char name1[30];        // имя первого игрока, строка из 30 символов
char name2[30];        // имя второго игрока
char table[3][3];
// таблица для игры в крестики-нолики, где строки это i а столбцы это j
// вид таблицы 3х3:
// [00] [01] [02]
// [10] [11] [12]
// [20] [21] [22]
bool step;            // переменная для определения кто будет ходить, первый или второй игрок.

void instructions()
{
    cout << "\t\t\t**Tic Tac Toe Game**\n\n";
    cout << "Rules of the game:\n";
    cout << "There are 2 player playing on the matrix of 3x3\n";
    cout << "The winner needs to get a winning combination!\n";
    cout << "Board:\n\n";

    int l = 0;

    for (int i(0); i < 3; i++)        // строки таблицы
    {
        for (int j(0); j < 3; j++)    // столбцы таблицы
        {
            cout << "| " << l + 1 << " "; // перед каждым символом в таблице будет стоять символ '| ' а после 'пробел'
            table[i][j] = char(49 + l);   // заполняем таблицу числами от 1 до 9
            l++;
            // table[i][j] = char(49 + l); заполняет таблицу 3х3 символами. Т.к. таблица типа char а клеточки для наглядности нам
            // нужно заполнить цифрами от 1 до 9 ('1' = 49) то нам нужно сделать такую запись char(49 + l). Она означает, что первым
            // символом нашей таблицы будет единица, ну а далее при условии l++ все клеточки таблицы будут заполнены от 1 до 9.
        }
        cout << "|";    // рассматриваем строки: в конце каждой строки ставим знак '|', чтобы таблица смотрелась нормально
        cout << endl;    // и пропускаем строку (суммарно 3 раза т.к. 3х3 таблица).
    }
    cout << "\nPlease chose your entry\n";
    cout << "Press any button to start a game:";
    _getch();

}
bool input()
{
    // для начала выводим таблицу на экран
    for (int i(0); i < 3; i++)
    {
        for (int j(0); j < 3; j++)
        {
            cout << "| " << table[i][j] << " ";
        }
        cout << "|";
        cout << endl;
    }

    cout << endl;
    if (step)
        cout << "Turn " << name1 << ": ";
    else cout << "Turn " << name2 << ": ";

    int n;
    cin >> n;
    if (n < 1 || n > 9) // если введенное число меньше 1 или больше 9
        return false;    // ввод не правильный

    int i, j;            // если ввод правильный, то мы ищем индекс в таблице

    if (n % 3 == 0)        // рассматриваем правый или 3-ий столбец, подходят только числа 3, 6 или 9
    {
        i = n / 3 - 1;    // 9/3-1=2; 6/3-1=1; 3/3-1=0 т.е. в зависимости от введенного числа символ 'X' или '0' будет установлен в
        j = 2;            // 1, 2 или 3-ю строку 3-го столбца. j=2 это и есть третий столбец.
    }
    else
    {
        j = n % 3 - 1;
        // 1%3=1-1=0; 2%3=2-1=1; 4%3=1-1=0; 5%3=2-1=1; 7%3=1-1=0; 8%3=2-1=1; если мы введем числа 1, 4 или 7 то они будут введены
        // в первый столбец (первый столбец это нулевой на самом деле), ну а если 2, 5 или 8 то во второй.
        i = n / 3;
        // 1/3 и 2/3 = 0; 4/3 и 5/3 = 1; 7/3 и 8/3 = 2; при делении типа int без остатка будет видна только его целая часть
        // т.е. если мы введем 1 или 2 это будет первая строка, 4 или 5 это будет вторая и т.д.
    }

    if (table[i][j] == '0' || table[i][j] == 'X') // если мы выбираем клетку, где уже стоит символ Х или 0
        return false;                              // возвращаем ложь, или ввод не верный, и будем вводить заново

    if (step)                // если step = true
    {
        table[i][j] = 'X';    // мы в выбранной клетке меняем число на символ Х
        step = false;        // и меняя step на false передаем ход
    }
    else { table[i][j] = '0'; step = true; }
    return true;


}
bool win()
{
    for (int i(0); i < 3; i++)
    {
        if ((table[i][0] == table[i][1]) && (table[i][0] == table[i][2]))
            return true;
        else if ((table[0][i] == table[1][i]) && (table[0][i] == table[2][i]))
            return true;
        else if ((table[0][0] == table[1][1] && table[0][0] == table[2][2]) || (table[2][0] == table[1][1] && table[2][0] == table[0][2]))
            return true;
        // рассматриваем условия победы: первое "если" рассматривает строки, 2-е столбцы ну а 3-е две диагонали
    }
    return false; // если условия победы не выполнены
}

int main()
{
    setlocale(LC_ALL, "russian");

    instructions(); // подключаем функцию с инструкциями
    system("cls");    // очищаем экран перед началом игры

    // Вводим имена 2-х игроков:
    cout << "Enter the name of the 1st player: ";
    cin.getline(name1, 30);
    cout << "Enter the name of the 2nd player: ";
    cin.getline(name2, 30);

    // Рандомно определяем кто будет ходить первым:
    srand(time(NULL));
    if (rand() & 1)
    // побитовое умножение на 1, это то же самое что и деление с остатком на 2, но операция битового умножения выполняется быстрее
    // чем операция деления и считается более оптимальной. Например мы число 1000 001 001 & 0000 000 001(единица) = 0000 000 001
    // т.е. если последним разрядом числа будет единица, то при умножении на 1 результат будет единица, ну а если последний разряд
    // числа будет 0, то и результат битового умножения будет равен нулю.
        step = true;
    else step = false;

    int i = 0;            // добавляем еще одну переменную для ничьей, она будет счетчиком

    while (!win())        // если еще никто не победил, то мы проверяем правильность ввода
    {
        if (i == 9)        // добавляем условие, когда ввод будет произведен 9 раз
        {
            system("cls");
            cout << "Draw!!!";
            _getch();
            return -1;
        }
        system("cls");    // очищаем экран
        if (!input())    // если ввод не удался
        {
            // если не написать cin.clear(); и while (cin.get() != '\n'); то при вводе букв программа заглючит
            cin.clear();
            while (cin.get() != '\n');
            cout << "Invalid entry! Try one more time";
            _getch();
        }
        i++;            // инкрементируем счетчик (запускаем)
    }

    system("cls");        // как только кто-то победил очищаем экран
    if (step)            // и выводим имя победителя на экран
        cout << "Winner " << name2 << " !!!" << endl;
    else cout << "Winner " << name1 << " !!!" << endl;


    _getch();
    return 0;
}
